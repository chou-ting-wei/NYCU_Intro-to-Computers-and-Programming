#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void morse_code_decoder() {
    char cc;
    char c[105];
    int a[105];
    cc = getchar();
    gets_s(c);
    int flgp = 0, cnta = 0;
    int flg = -1, cntdl = 0, cntmc = 0;
    for (int i = 0; i < 100; i++) a[i] = -1;
    if (cc == '.') {
        if (cntmc == 0) {
            flg = 0;
        }
        if (flg == 0) {
            cntdl++;
        }
        cntmc++;
    }
    else if (cc == '-') {
        if (cntmc == 0) {
            flg = 1;
        }
        if (flg == 1) {
            cntdl++;
        }
        cntmc++;
    }
    for (int i = 0; i < 100; i++) {
        if (c[i] == '/' || c[i] == '\0') {
            if (flgp) printf(" ");
            for (int j = 0; j < 100; j++) {
                if (a[j] != -1) {
                    printf("%d", a[j]);
                    a[j] = -1;
                }
            }
            flgp = 1;
            cnta = 0;
        }
        if (c[i] == '\0') {
            printf("\n");
            return;
        }
        if (c[i] == '.') {
            if (cntmc == 0) {
                flg = 0;
            }
            if (flg == 0) {
                cntdl++;
            }
            cntmc++;
        }
        else if (c[i] == '-') {
            if (cntmc == 0) {
                flg = 1;
            }
            if (flg == 1) {
                cntdl++;
            }
            cntmc++;
        }
        if (cntmc == 5) {
            if (flg == 0) {
                a[cnta] = cntdl;
            }
            else {
                a[cnta] = (cntdl + 5) % 10;
            }
            cnta++;
            cntmc = 0;
            cntdl = 0;
            flg = -1;
        }
    }
}

int main() {
    int n;
    scanf("%d", &n);

    while (n--) { morse_code_decoder(); }
    
    return 0;
}
/*
.---- ....- ..--- ---.. ..... --...

.---- ....- ----- / .---- .---- ...-- / ---.. --... / ---.. --...
..... ..--- .---- .---- ...-- / .---- .---- ....- ---.. ---..
..... ..--- ----- / .---- ...-- .---- ....- / ..--- .---- ----. ----.

*/
/*
Input:
10
....- --... ...-- ---.. ----. ..--- ---.. --... ....- ---.. ...-- ...-- ---.. .---- ----- ----.
----. ----- ----. ....- --... ...-- -.... ..--- / .---- ---.. ..--- ----. ....- --... ..--- -....
..--- ---.. ----. .---- ...-- / ....- ..... .---- ---.. .---- / ...-- --... ..--- ---.. .---- ----.
..--- ----. ...-- ---.. / ..--- ...-- ....- ---.. / ....- ----. ----- ...-- / ....- .---- ---..
.---- ..--- / ..... ---.. ----. / ....- ---.. ...-- / .---- ..--- ---.. / ....- --... ----. ----.
....- ----. / ....- -.... --... / ----- ----. .---- / ..--- ...-- --... / --... / .---- ----- ----.
..... ...-- ..--- / -.... .---- / ----. ...-- / .---- --... ---.. / ..--- / ---.. ..--- / ---..
.---- ...-- / ---.. / ----- ----. ..--- / ----- / ..--- --... / ...-- .---- / -.... / ..--- ----.
.---- / ..--- ----- / ..--- ----. / ---.. / --... / ...-- ..... / ---.. ..... / ..... / --... ---..
...-- ....- / ..--- / -.... / ..--- ...-- / ---.. ----. / ..... / ---.. / ----- / .---- / ....-

Output:
4738928748338109
90947362 18294726
28913 45181 372819
2938 2348 4903 418
12 589 483 128 4799
49 467 091 237 7 109
532 61 93 178 2 82 8
13 8 092 0 27 31 6 29
1 20 29 8 7 35 85 5 78
34 2 6 23 89 5 8 0 1 4
*/